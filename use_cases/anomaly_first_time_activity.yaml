name: First time activity
type: Anomaly-triggering
purpose: This use case aims to identify employees who recently engaged in activity related to a patient without having any prior history of activity in the last 6 months.
use_case_ID: 'uc1'
prerequisites: 
- data_sources: 
          Events from any journal system that records activities between employees and patients.
- tags:
          'journal'
- indexes: 
          'anomaly_collection' (explanation: an index where identified anomalies are stored as events)
- lookups: 
          'baseline_historical_activity' (explanation: a lookup file that stores information about the last recorded activity between employees and patients)
- fields: 
          'staff_ID' (explanation: a unique identifier for the employee)
          'patient_ID' (explanation: a unique identifier for the patient)
          'care_provider_ID' (explanation: a unique identifier for the care provider)
          'care_unit_ID' (explanation: a unique identifier for care unit at the care provider)
- searches: 
          'search 1'
          'search 2'
          'search 3'
how_to_implement (note: everything is case sensitive, and the steps 1-5 should be executed in a sequential order):
          1. eventtype: Each data source must have a unique event type, and all event types must reference the tag 'journal'. 
          
          Event types are used to categorize events within a data source, allowing them to be easily referenced in searches to retrieve only the relevant events for a specific use case. Since multiple event types can be associated with the same category of data, you can reference the associated tag (instead of all individual event types one by one) in search to retrieve all relevant events efficiently.

                    Name: <the event type name must be unique.>
                    Search string: <best practice is to reference the index, host, source, and sourcetype fields with their respective values. Additionally, it may be necessary to include data source specific field::value pairs and search terms to narrow down the events to the desired categorisation>
                    Tag(s): journal
          
          2. index: Create an index called 'anomaly_collection'.
          3. lookup: Import the lookup 'baseline_historical_activity' (https://github.com/spettersson/splunk4patientprivacy/blob/cc1ba2159eadc166eee0226790126da16d50f608/lookups/baseline_historical_baseline.csv). Make use of the Splunk app 'Splunk App for Lookup File Editing' (https://splunkbase.splunk.com/app/1724).
          4. field: Create the fields 'staff_ID', 'patient_ID', 'care_provider_ID' and 'care_unit_ID'. ensuring that each data source has a unique extraction to prevent field name collisions. For example, if dealing with Cambio COSMIC logs, extract the field as cosmic_staff_ID and then create a field alias (cosmic_staff_ID AS staff_ID) to make sure that it matches the field name(s) that this use case expects. This approach allows multiple data sources to maintain unique field extractions while enabling searches using a common field name (staff_ID).
          5. macro: Create the macros 'pda_indexes', 'pda_sourcetypes', and 'pda_sources'. Have them refer to the indexes, sourcetypes and sources that are used by the logs and events that fall under the Patient Data Act - this ensures that when the macros are referenced in a search, Splunk will retreive the right data. 
          6. search: Create 'search 1', followed by 'search 2', followed by 'search 3'.
search 1: 
- description: establishes a baseline of historical activity for the past 6 months.
- search: 
          tag=journal earliest=-6mon
          | fields _time, staff_ID, patient_ID
          | stats latest(_time) as last_activity by staff_ID, patient_ID
          | table staff_ID, patient_ID, last_activity
          | outputlookup baseline_historical_activity
- time range picker: the time range for search 1 is explicitly defined within the search using the earliest option (earliest=-6mon). By default, the search processes data from current time to 6 month ago (with the possiblity to adjust to specific needs/requirements).
- cron schedule: N/A (run only once in the search bar).
search 2: 
- description: incrementally updates the historical activity on a daily basis.
- search:
          | inputlookup baseline_historical_activity
          | append [
                    tag=journal earliest=-1d@d latest=@d
                    | fields _time, staff_ID, patient_ID
                    | stats latest(_time) as last_activity by staff_ID, patient_ID
                    | table staff_ID, patient_ID, last_activity
                   ]
          | stats max(last_activity) as last_activity by staff_ID, patient_ID
          | table staff_ID, patient_ID, last_activity
          | outputlookup baseline_historical_activity
- time range picker: the time range for search 2 is explicitly defined in the search using the earliest and latest options (earliest=-1d@d and latest=@d). By default, the search processes data from the entire previous day (midnight to midnight).
- cron schedule: 0 0 * * * (scheduled to run every day of the week at midnight).
search 3:
- description: identifies employees who have interacted with a patient within the past 10-minute window (accounting for a 2-minute latency) but have not had any prior contact with the same patient in the last 6 months. For every single match, an anomaly is triggered and stored in the anomaly_collection index as an event for further correlation and analytics.
- search:
          tag=journal earliest=-12min@min latest=-2min@min
          | fields _time, staff_ID, patient_ID, care_provider_ID, care_unit_ID
          | stats earliest(_time) as last_activity values(care_provider_ID) as care_provider_ID values(care_unit_ID) as care_unit_ID by staff_ID, patient_ID
          | lookup baseline_historical_activity staff_ID patient_ID OUTPUT last_activity AS baseline_last_activity
          | eval time_since_last_activity = now() - baseline_last_activity
          | eval anomaly = if(isnull(baseline_last_activity) OR time_since_last_activity >= 14515200 , "1", "0")
          | where anomaly = "1"
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(last_activity) AS last_activity 
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(baseline_last_activity) AS baseline_last_activity 
          | eval anomaly_title = "First time activity"
          | eval anomaly_description = "Employee ID ".staff_ID." engaged in activity related to Patient ID ".patient_ID." on ".last_activity.". The last recorded activity prior to that was on ".baseline_last_activity."."
          | eval use_case_ID="uc1"
          | eval risk_score = "20" ```this should be a value ranging from 0 and 100 - make sure to adjust according to the perceived risk of this type of anomaly```
          | addinfo
          | eval anomaly_ID = md5(staff_ID.patient_ID.last_interaction.sid.info_search_time)
          | fields use_case_ID, anomaly_ID, anomaly_title, anomaly_description, risk_score, care_provider_ID, care_unit_ID, staff_ID, patient_ID, last_activity, baseline_last_activity, info_search_time, info_min_time, info_max_time
          | collect index=anomaly_collection addinfo=false
- time range picker: the time range for search 3 is explicitly defined within the search using the earliest and latest options (earliest=-12min@min and latest=-2min@min). By default, the search processes data from 12 minutes ago up to 2 minutes ago (with the possiblity to adjust to specific needs/requirements), ensuring a consistent 10-minute window that accounts for potential data latency.
- cron schedule: */10 * * * * (scheduled to run every 10th minute of every hour, 24/7, across all days of the week).

